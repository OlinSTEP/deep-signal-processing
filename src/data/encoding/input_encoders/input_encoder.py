from abc import ABC, abstractmethod


class AbstractInputEncoder(ABC):
    """
    Input encoding base class

    Input encoders take in data of a standardized format and prepare them for
    consumption by a model.
    """
    def __init__(self, config):
        self._input_dim = None
        super().__init__()

    @abstractmethod
    def fit(self, inputs):
        """
        Fit the input encoder to the train data

        Mainly required for encoding types that depend on properties of the input
        data (Ex: PaddedSequenceEncoder). Should always set self._input_dim for
        model building.

        :param inputs generator->list[(sample_rate, sequence_data)]:
            Generator that produces inputs as created by the Loader.
        """
        pass

    @abstractmethod
    def transform(self, data, is_train):
        """
        Transform the data into a format the model can consume

        :param data list[(sample_rate, sequence_data)]: Single datapoint as
            created by a Loader.
        :param is_train bool: Bool indicating if datapoint is in train data
        """
        pass

    @abstractmethod
    def collate_fn(self, batch):
        """
        Collate function to use for batching

        See PyTorch documentation on Datasets for further details:
        https://pytorch.org/docs/stable/data.html

        :param batch list[dict]: List of datapoints as generated by
            Dataset.__get_item__(). Datapoints are dictionaries "input" and
            "target" keys, each mapping to a datapoint generated by Input
            Encoder and Target Encoder transform() methods

        :returns dict: Dictionary with "input" and "target" keys, corresponding
            to input and target to feed into model
        """
        pass

    @property
    def input_dim(self):
        if self._input_dim is None:
            raise NotImplementedError
        return self._input_dim
