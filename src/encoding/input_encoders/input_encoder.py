from abc import ABC, abstractmethod


class AbstractInputEncoder(ABC):
    """
    Input encoding base class

    Input encoders take in data of a standardized format and prepare them for
    consumption by a model.
    """
    def __init__(self):
        self._input_dim = None
        super().__init__()

    @abstractmethod
    def fit(self, inputs):
        """
        Fit the input encoder to the train data

        Mainly required for encoding types that depend on properties of the input
        data (Ex: PaddedSequenceEncoder). Should always set self._input_dim for
        model building.

        :param inputs list[np.array]: List of input arrays, all input datapoints
            each in (time, channels) format
        """
        pass

    @abstractmethod
    def transform(self, data):
        """
        Transform the data into a format the model can consume

        :param data np.array: Numpy array of single datapoint in
            (time, channels) format
        """
        pass

    @abstractmethod
    def collate_fn(self, batch):
        """
        Collate function to use for batching

        See PyTorch documentation on Datasets for further details:
        https://pytorch.org/docs/stable/data.html

        :param batch list[dict]: List of datapoints as generated by
            Dataset.__get_item__(). Datapoints are dictionaries "input" and
            "target" keys, each mapping to a datapoint generated by transform()
        """
        pass

    @property
    def input_dim(self):
        if self._input_dim is None:
            raise NotImplementedError
        return self._input_dim
